DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"

stdout_stderr=`mktemp`

for f in `find $DIR -type f`; do
    self=`basename $f`
    if [ "$self" == "test-all" ]; then
        continue
    fi

    echo -e "\033[35m================================================================================\033[0m" >> $stdout_stderr
    echo -e "\033[37m[${BASH_SOURCE[0]#*kissbash/}] \033[33m${f#*kissbash/}\033[0m" >> $stdout_stderr
    echo -e "\033[37mRunning $f\033[0m" >&2

    (
        . $f
        cat "$f" | grep -E '^test_[_a-zA-Z]*()' | while read line; do
            echo -e "\033[37m--------------------------------------------------------------------------------\033[0m" >> $stdout_stderr
            test_func=${line%()*}
            echo -e "\033[37m[${BASH_SOURCE[0]#*kissbash/}] \033[33m${f#*kissbash/}::\033[1;33m$test_func\033[0m" >> $stdout_stderr
            echo -e "     \033[37m$test_func\033[0m \033[s" >&2
            "$test_func" >> $stdout_stderr 2>&1
            retval=$?

            echo -en "\033[1A\033[0G" >&2
            if [ "x$retval" == "x$expected_retval" ]; then
                echo -e "\033[32mPASS\033[0m" >&2
            else
                echo -e "\033[31mFAIL\033[0m" >&2
            fi
            echo >> $stdout_stderr
        done
    )

    echo
done

echo -e "\033[36m**************************************DONE**************************************\033[0m\n"

echo -e "for details,\n\033[1mcat $stdout_stderr\033[0m"

if [ "x$1" == "x-v" ] || [ "x$1" == "x--verbose" ]; then
    echo
    cat $stdout_stderr
fi
